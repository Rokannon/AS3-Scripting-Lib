#summary Instructions for using object proxies
#labels Phase-Implementation

= Introduction =

Object proxies are an attempt at managing references made between executing scripts and the main movie that could cause memory leaks. For example, if code in an executing script wishes to add itself as an event listener to its scope object, that reference could prevent the executing script from ever being garbage collected.

Object proxies are not complete and may end up causing trouble. For instance, since using object proxies causes the scope object and any object referenced off of it to be wrapped in an instance of `ESObject`, certain language features may not work properly (such as "is" or "instanceof").

Proxied objects can be identified in their `toString()` output by the triple curly braces wrapped around the proxied object's normal output (ex. "`{{{[object Object]}}}`").

The flag for using object proxies is the second argument of the `ScriptContext` constructor. Set to false by default, though that may change as the feature becomes more mature in the interest of better reference management.

= Details =

Assuming an initialized instance of `ICompiler` already exists:

{{{

import com.newgonzo.scripting.ICompiler;
import com.newgonzo.scripting.ScriptContext;

var scope:Object = stage;
var useObjectProxies:Boolean = true;

var context:ScriptContext = new ScriptContext(scope, useObjectProxies);

compiler.compileAndLoad("trace(this);", context);

// traces "{{{[object Stage]}}}"

useObjectProxies = false;
context = new ScriptContext(scope, useObjectProxies);

compiler.compileAndLoad("trace(this);", context);

// traces "[object Stage]"

}}}